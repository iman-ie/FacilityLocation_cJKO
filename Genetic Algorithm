import numpy as np
from deap import base, creator, tools, algorithms
import random

def generate_initial_solution_ga(I, J, T, q_j, f, a, c, rho, P_0, pop_size=50, generations=100, mutation_rate=0.1,
                                 alpha=0.8):
    def fitness(individual):
        X, S, Y = decode_solution(individual, J, T, I, q_j)

        # Calculate Z for facility opening 
        Z = np.zeros_like(X)
        Z[:, 0] = X[:, 0]
        Z[:, 1:] = np.logical_and(X[:, 1:], np.logical_not(X[:, :-1])).astype(int)

        # Fixed facility costs and inventory holding costs
        inventory_cost = np.sum(a * (S - np.concatenate([np.zeros((J, 1)), S[:, :-1]], axis=1)))
        term1 = np.sum(f * Z) + inventory_cost

        # Expected transportation and shortage costs
        expected_cost = np.mean([
            np.sum(c * (Y * P_0[scenario][:, np.newaxis])) +
            np.sum(rho[np.newaxis, :, np.newaxis] *
                   np.maximum(0, Y * P_0[scenario][:, np.newaxis] - S[:, np.newaxis, :]))
            for scenario in range(P_0.shape[0])
        ])

        cost = term1 + expected_cost

        # Penalty for constraint violations
        penalty = 0

        # Allocation constraint (8): α ≤ ∑_j∑_t Y_jit ≤ 1, ∀i ∈ [I]
        allocation_sums = np.sum(Y, axis=(0, 2))  # Sum over j and t
        allocation_violations = np.sum(np.maximum(0, alpha - allocation_sums)) + np.sum(
            np.maximum(0, allocation_sums - 1))
        penalty += 1000 * allocation_violations

        # Facility constraint: each facility opened at most once (9)
        facility_violations = np.sum(np.maximum(0, np.sum(Z, axis=1) - 1))
        penalty += 1000 * facility_violations

        # Return negative total cost
        return -(cost + penalty),

    def decode_solution(individual, J, T, I, q_t):
        X_flat = individual[0:J * T]
        S_flat = individual[J * T:2 * J * T]
        Y_flat = individual[2 * J * T:]

        # Decode X as binary (0 or 1)
        X = np.array(X_flat).reshape(J, T)
        X = (X > 0.5).astype(int)  # Thresholding for binary decision

        # Ensure at least one facility is open per period
        for t in range(T):
            if np.sum(X[:, t]) == 0:
                X[np.random.randint(0, J), t] = 1

        # Decode S and clip within bounds only for open facilities
        S = np.clip(np.array(S_flat).reshape(J, T), 3, 15) * X  # 0 if not open

        # Decode Y and apply constraints
        Y = np.clip(np.array(Y_flat).reshape(J, I, T), 0, 1) * X[:, np.newaxis, :]  # 0 if not open
        Y = np.minimum(Y, S[:, np.newaxis, :])  # Ensure allocations don't exceed storage

        return X, S, Y

    creator.create("FitnessMin", base.Fitness, weights=(1.0,))
    creator.create("Individual", list, fitness=creator.FitnessMin)
    toolbox = base.Toolbox()
    toolbox.register("attr_float", random.uniform, 0, 1)

    toolbox.register("individual", tools.initRepeat, creator.Individual, toolbox.attr_float,
                     n=(J * T + J * T + J * I * T))

    toolbox.register("population", tools.initRepeat, list, toolbox.individual)
    toolbox.register("mate", tools.cxTwoPoint)
    toolbox.register("mutate", tools.mutUniformInt, low=0, up=1, indpb=mutation_rate)

    toolbox.register("select", tools.selTournament, tournsize=3)
    toolbox.register("evaluate", fitness)
    # Register genome element generator

    # Total number of genes = X + S + Y


    pop = toolbox.population(n=pop_size)
    algorithms.eaSimple(pop, toolbox, cxpb=0.5, mutpb=0.2, ngen=generations, verbose=False)
    best_ind = tools.selBest(pop, k=1)[0]
    return decode_solution(best_ind, J, T, I, q_t)
