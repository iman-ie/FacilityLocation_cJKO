#  Solve cJKO Wasserstein-check-chance-constrained update
# ------------------------------
def check_chance_constraints_cjko(Y, S, eta, X, P_k, P_0, eps, max_iter=10, tol=1e-6):
    """
    Enforces chance constraints under Wasserstein ambiguity by checking
    the worst-case violation probability within the ambiguity set.

    Parameters:
        Y (ndarray): Allocation matrix (J x I x T)
        S (ndarray): Storage matrix (J x T)
        eta (float): Probability confidence level (e.g., 0.95)
        X (ndarray): Facility decisions (J x T), not directly used here
        P_k (ndarray): Current demand distribution (num_scenarios x I)
        P_0 (ndarray): Nominal (initial) distribution
        eps (float): Wasserstein radius
        max_iter (int): Maximum optimization iterations
        tol (float): Optimization tolerance

    Returns:
        tuple: (constraint_satisfied (bool), best_P_k (ndarray))
    """

    num_scenarios, num_customers = P_k.shape
    v = np.ones((num_customers,)) / np.sqrt(num_customers)

    def build_rotation_matrix(alpha, d):
        R = np.eye(d)
        for l in range(d - 1):
            i, j = l, l + 1
            theta = alpha[l]
            G = np.eye(d)
            G[i, i] = np.cos(theta)
            G[i, j] = -np.sin(theta)
            G[j, i] = np.sin(theta)
            G[j, j] = np.cos(theta)
            R = R @ G
        return R

    def chance_violation_prob(P):
        """Computes the empirical probability of violating storage constraint under demand."""
        violations = 0
        for scenario in range(num_scenarios):
            demand = P[scenario]
            for t in range(Y.shape[2]):
                for j in range(Y.shape[0]):
                    unmet_demand = np.sum(Y[j, :, t] * demand) - S[j, t]
                    if unmet_demand > 0:
                        violations += 1
                        break  # Stop checking this scenario
                else:
                    continue
                break
        return violations / num_scenarios

    best_P_k = P_k.copy()
    best_violation = 0.0

    for k in range(max_iter):
        def wasserstein_obj(params):
            """Objective: maximize the chance constraint violation."""
            lambda_k = params[:num_scenarios]
            alpha_k = params[num_scenarios:].reshape(num_scenarios, num_customers)

            P_new = np.zeros_like(P_k)
            for i in range(num_scenarios):
                R_i = build_rotation_matrix(alpha_k[i], num_customers)
                direction = v @ R_i
                P_new[i] = P_k[i] - lambda_k[i] * direction

            return chance_violation_prob(np.clip(P_new, 0, None))

        def apply_transport(P_k, lambda_k, alpha_k, v):
            """Applies transport updates with projection."""
            P_new = np.zeros_like(P_k)
            for i in range(P_k.shape[0]):
                R_i = build_rotation_matrix(alpha_k[i], P_k.shape[1])
                direction = v @ R_i
                P_new[i] = P_k[i] - lambda_k[i] * direction
            return np.clip(P_new, 0, None)

        def wasserstein_constraint(params):
            """Ensures the Wasserstein distance remains within Îµ."""
            lambda_k = params[:num_scenarios]
            alpha_k = params[num_scenarios:].reshape(num_scenarios, num_customers)
            P_new = apply_transport(P_k, lambda_k, alpha_k, v)
            distance = np.mean([np.linalg.norm(P_new[i] - P_k[i])**2 for i in range(num_scenarios)])
            return eps - distance

        # === Optimization Setup ===
        initial_params = np.hstack([
            np.random.uniform(0.5, 1.0, num_scenarios),
            np.random.uniform(-np.pi, np.pi, num_scenarios * num_customers)
        ])

        result = opt.minimize(
            fun=lambda x: wasserstein_obj(x),
            x0=initial_params,
            constraints=[{'type': 'ineq', 'fun': wasserstein_constraint}],
            method='COBYLA',
            tol=tol
        )

        lambda_k = result.x[:num_scenarios]
        alpha_k = result.x[num_scenarios:].reshape(num_scenarios, num_customers)
        P_new = apply_transport(P_k, lambda_k, alpha_k, v)
        P_new = P_new / np.sum(P_new, axis=1, keepdims=True)  # Normalize to maintain valid demand proportions

        current_violation = chance_violation_prob(P_new)

        if current_violation > best_violation:
            best_violation = current_violation
            best_P_k = P_new.copy()

        if best_violation >= (1 - eta):
            break

    constraint_satisfied = best_violation <= (1 - eta)
    return constraint_satisfied, best_P_k
